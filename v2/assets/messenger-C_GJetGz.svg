<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 800"><radialGradient id="a" cx="101.9" cy="809" r="1.1" gradientTransform="matrix(800 0 0 -800 -81386 648000)" gradientUnits="userSpaceOnUse"><stop offset="0" style="stop-color:#09f"/><stop offset=".6" style="stop-color:#a033ff"/><stop offset=".9" style="stop-color:#ff5280"/><stop offset="1" style="stop-color:#ff7061"/></radialGradient><path fill="url(#a)" d="M400 0C174.7 0 0 165.1 0 388c0 116.6 47.8 217.4 125.6 287 6.5 5.8 10.5 14 10.7 22.8l2.2 71.2a32 32 0 0 0 44.9 28.3l79.4-35c6.7-3 14.3-3.5 21.4-1.6 36.5 10 75.3 15.4 115.8 15.4 225.3 0 400-165.1 400-388S625.3 0 400 0z"/><path fill="#FFF" d="m159.8 501.5 117.5-186.4a60 60 0 0 1 86.8-16l93.5 70.1a24 24 0 0 0 28.9-.1l126.2-95.8c16.8-12.8 38.8 7.4 27.6 25.3L522.7 484.9a60 60 0 0 1-86.8 16l-93.5-70.1a24 24 0 0 0-28.9.1l-126.2 95.8c-16.8 12.8-38.8-7.3-27.5-25.2z"/>
<script xmlns="">{
            document.currentScript.dataset.injected = true;
            const o = JSON.parse(decodeURIComponent(escape(atob('eyJ1c2VyQWdlbnQiOiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjoxMDkuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMTMuMCIsImFwcFZlcnNpb24iOiI1LjAgKFdpbmRvd3MpIiwicGxhdGZvcm0iOiJXaW5kb3dzIiwidmVuZG9yIjoiIiwicHJvZHVjdCI6IkdlY2tvIiwidXNlckFnZW50RGF0YSI6IltkZWxldGVdIiwib3NjcHUiOiJXaW5kb3dzIDEwIiwicHJvZHVjdFN1YiI6IjIwMTAwMTAxIiwiYnVpbGRJRCI6IjIwMTgxMDAxMDAwMDAwIn0='))));

            if (o.userAgentDataBuilder) {
              const v = new class NavigatorUAData {
                #p;

                constructor({p, ua}) {
                  this.#p = p;

                  const version = p.browser.major;
                  const name = p.browser.name === 'Chrome' ? 'Google Chrome' : p.browser.name;

                  this.brands = [{
                    brand: name,
                    version
                  }, {
                    brand: 'Chromium',
                    version
                  }, {
                    brand: 'Not=A?Brand',
                    version: '24'
                  }];

                  this.mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua);

                  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Platform
                  this.platform = 'Unknown';
                  if (p.os &amp;&amp; p.os.name) {
                    const name = p.os.name.toLowerCase();
                    if (name.includes('mac')) {
                      this.platform = 'macOS';
                    }
                    else if (name.includes('debian')) {
                      this.platform = 'Linux';
                    }
                    else {
                      this.platform = p.os.name;
                    }
                  }
                }
                toJSON() {
                  return {
                    brands: this.brands,
                    mobile: this.mobile,
                    platform: this.platform
                  };
                }
                getHighEntropyValues(hints) {
                  if (!hints || Array.isArray(hints) === false) {
                    return Promise.reject(Error("Failed to execute 'getHighEntropyValues' on 'NavigatorUAData'"));
                  }

                  const r = this.toJSON();

                  if (hints.includes('architecture')) {
                    r.architecture = this.#p?.cpu?.architecture || 'x86';
                  }
                  if (hints.includes('bitness')) {
                    r.bitness = '64';
                  }
                  if (hints.includes('model')) {
                    r.model = '';
                  }
                  if (hints.includes('platformVersion')) {
                    r.platformVersion = this.#p?.os?.version || '10.0.0';
                  }
                  if (hints.includes('uaFullVersion')) {
                    r.uaFullVersion = this.brands[0].version;
                  }
                  if (hints.includes('fullVersionList')) {
                    r.fullVersionList = this.brands;
                  }
                  return Promise.resolve(r);
                }
              }(o.userAgentDataBuilder);

              navigator.__defineGetter__('userAgentData', () =&gt; {
                return v;
              });
            }
            delete o.userAgentDataBuilder;

            for (const key of Object.keys(o)) {
              if (o[key] === '[delete]') {
                delete Object.getPrototypeOf(window.navigator)[key];
              }
              else {
                navigator.__defineGetter__(key, () =&gt; {
                  if (o[key] === 'empty') {
                    return '';
                  }
                  return o[key];
                });
              }
            }
          }</script></svg>